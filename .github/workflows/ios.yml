name: iOS app build and test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # get or build brew dependencies
      - name: Get bottles from cache
        uses: actions/cache@v4
        id: cache-restore-bottles
        with:
          key: bottles
          path: ./bottles
      - name: Install and bottle xcparse
        if: steps.cache-restore-bottles.outputs.cache-hit != 'true'
        run: |
          brew install chargepoint/xcparse/xcparse --build-bottle
          brew bottle xcparse
          mkdir -p bottles
          mv ./*bottle*.tar.gz bottles
      - name: Install and bottle xcodegen
        if: steps.cache-restore-bottles.outputs.cache-hit != 'true'
        run: |
          brew install xcodegen --build-bottle
          brew bottle xcodegen

          mkdir -p bottles
          mv ./*bottle*.tar.gz bottles

      - name: Install cached bottles
        if: steps.cache-restore-bottles.outputs.cache-hit == 'true'
        run: |
            brew install -f ./bottles/*

      # build and test project
      - name: Create project with xcodegen
        run: |
          xcodegen
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          echo $scheme_list
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -showBuildTimingSummary
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -resultBundlePath TestResults.xcresult
      - uses: actions/upload-artifact@v4
        with:
          name: xcode_results
          path: TestResults.xcresult
      - name: Export screenshots
        run: |
          xcparse screenshots TestResults.xcresult Screenshots/
      - uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: Screenshots/
